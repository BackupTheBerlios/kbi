#!/usr/bin/env python 

##############################################################
# KBI.PY
# Released under GPLv2 - http://www.gnu.org/copyleft/gpl.html
# Luis "Drune" Marques - Drune@gmx.net
##############################################################

import pygtk, os, gobject, gtk, gtk.glade, sys, kbi_base, kbi_ui, kbi_conf
from pysqlite2 import dbapi2 as sqlite


## MAIN METHODS ####

def DestroyFunction(obj):
	gtk.main_quit()


def saveDataBaseObj(obj):
	if kbi_base.saveDataBase(widgetTree) == 1:
		kbi_ui.message("Kbi: Commited to database with success!", window)
	else:
		kbi_ui.error("Kbi: Error Saving DataBase..", window)

def ClearTextObj(obj):
	ClearText(widgetTree)

def searchI(obj):
	searchItens(widgetTree)

def removeI(obj):
	kbi_base.removeItem(tree_search)
	# refresh ..
	kbi_base.listALL(tree_mod)

def show_ALL_itens(obj):
	kbi_base.listALL(tree_mod)


def exportTo(obj):
	if kbi_base.processText(kbi_conf.returnExt(), tree_search) == 1:
		kbi_ui.message("Kbi: File Exported to "+kbi_conf.returnExportConf(), window)
	else:
		kbi_ui.error("Kbi: Error Exporting File to "+kbi_conf.returnExportConf(), window)


def searchItens(widgetTree):
	try:
		esearch = widgetTree.get_widget("esearch")
		text = esearch.get_text()
		kbi_base.search(tree_mod, text)


	except IOError: 
		print "E: Something is wrong. Contact the developper: searchIntens()"

def ClearText(widgetTree):
	try:
		
		script_name = widgetTree.get_widget("text_name")
		text = widgetTree.get_widget("text_code")
		t = text.get_buffer()
		t.set_text("")

	except IOError: 
		print "E: Something is wrong. Contact the developper: ClearText()"


## SET INITIAL PREFERENCES ###

def setInitPrefs(widgetTree):
	#set Export Path
	fe = widgetTree.get_widget("texport")
	fe.set_text(kbi_conf.returnExportConf())





### EXPORT DATABASE ###
def exportDBUI(obj):
	kbi_ui.saveDialog(widgetTree, "Export Database")
	

def addCatInterface(obj):
	kbi_base.addCatUI(widgetTree)

def addNewDatabaseUI(obj):
	kbi_base.newDatabase(widgetTree)


def changeExportPathUI(obj):
	ed = kbi_ui.changeExportPath()
	kbi_conf.SaveConfiguration(widgetTree, ed)
	
	etex = widgetTree.get_widget("texport")
	etex.set_text(kbi_conf.returnExportConf())
	

def importDatabase(obj):
	kbi_ui.ImportDialog(widgetTree, "Import Database")
	#clear databases and reload databases
	kbi_base.returnDBs(widgetTree)
#MAIN CODE...


tree_mod=gtk.TreeStore(gobject.TYPE_STRING, gobject.TYPE_STRING, gobject.TYPE_STRING)
widgetTree = gtk.glade.XML("/usr/share/kbi/kbi.glade")




dic = {"on_codepy_destroy" : DestroyFunction,
	"on_quit2_activate": DestroyFunction,
		"on_saveCode_clicked": saveDataBaseObj,
		"on_clearCode_clicked": ClearTextObj,
		"on_bsearch_clicked": searchI,
		"on_breload_clicked": show_ALL_itens,
		"on_bopen_clicked": exportTo,
		"on_bremove_clicked": removeI,
		"on_new_category2_activate": addCatInterface,
		"on_export_selected1_activate": exportDBUI,
		"on_about1_activate": kbi_ui.about,
		"on_create_database1_activate": addNewDatabaseUI,
		 "on_bchange_clicked": changeExportPathUI,
		"on_import_database1_activate": importDatabase }

		
widgetTree.signal_autoconnect (dic)
window = widgetTree.get_widget("codepy")

window.show()



tree_search = widgetTree.get_widget("tree_search")
kbi_ui.show_col(tree_search, widgetTree, tree_mod)
	

# frist RUN - Create a Empty database

if kbi_base.firstRun() == 1:
	kbi_ui.message("Kbi: First Kbi run is complete! Check your ~/.kbi/ for database and configuration file.", window)

# update Software Database in tree:
kbi_base.listALL(tree_mod)

# fill categories..
kbi_base.getAllCats(widgetTree)

# fill all databases..
kbi_base.returnDBs(widgetTree)

# Set Preferences..
setInitPrefs(widgetTree)

gtk.main()
